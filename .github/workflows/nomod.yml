name: nomod CI

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  build2:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
         submodules: recursive                
    - name: apt-get
      run: |
         set -x
         sudo apt-get update
         sudo apt-get install git build-essential fakeroot libncurses5-dev libssl-dev ccache dfu-util u-boot-tools device-tree-compiler libssl-dev mtools bc python3 cpio zip unzip rsync file wget libiio-dev libncurses5-dev build-essential bison flex libssl-dev bc

    - name: Get Date
      id: get-date
      run: |
        echo "date=$(/bin/date -u "+%Y%m%d-%H:%M:%S")" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: Cache
      uses: actions/cache@v2.1.7
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: plutosdr-fw/buildroot/dl/
        # An explicit key for restoring and saving the cache
        key: plutodl-${{ steps.get-date.outputs.date }}
        restore-keys: plutodl-
        
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ runner.os }}
        
    - name: configure buildroot
      env:
          SKIP_LEGAL: 1
      run: |
          set -x -e
          
          export BR2_USE_CCACHE=1
          export BR2_CCACHE_DIR=$(pwd)/.ccache
          
          cd plutosdr-fw
          touch buildroot/board/pluto/msd/LICENSE.html
          
          echo "BR2_CCACHE=y" >> buildroot/configs/zynq_pluto_defconfig
          
          echo "BR2_PACKAGE_LIQUID_DSP_FAST=y" >> buildroot/configs/zynq_pluto_defconfig
          
          make -C buildroot ARCH=arm zynq_pluto_defconfig
          make -C buildroot toolchain
          make -C buildroot libiio
          #make -C buildroot liquid-dsp
          make -C buildroot libad9361-iio
          make -C buildroot ad936x_ref_cal
          make -C buildroot libini
          make -C buildroot zlib
          
          make -C buildroot fftw-double 
          make -C buildroot fftw-single 
          
          export PATH=`pwd`/buildroot/output/host/bin:`pwd`/buildroot/output/host/sbin:${PATH}
          export CROSS_COMPILE="arm-linux-gnueabihf-"
          export SYSROOT=`pwd`/buildroot/output/host/arm-buildroot-linux-gnueabihf/sysroot/
          
          git tag v0.34 || true
          
          sudo update-ccache-symlinks
          
          which ${CROSS_COMPILE}gcc         
          
          cd ..       
          
          
          cd third_party/libtuntap
          sed -i 's\/usr/include/\\g' CMakeLists.txt
          sed -i 's\/usr/local/include\\g' CMakeLists.txt
          mkdir build
          cd build
          cmake .. -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++
          make
          cp lib/*.a ../
          cp tuntap-export.h ../
          cd ..
          cd ..
          cd ..
          
          cd third_party/libfec
          make 
          cp fec.h ../../plutosdr-fw/buildroot/output/host/arm-buildroot-linux-gnueabihf/sysroot/usr/include/
          cp *.a ../../plutosdr-fw/buildroot/output/host/arm-buildroot-linux-gnueabihf/sysroot/usr/lib/
          cp *.a ../../plutosdr-fw/buildroot/output/target/usr/lib/
          cd .. 
          cd ..
          
          cd plutosdr-fw
          make -C buildroot liquid-dsp
          cd ..
          
          make
          #cp third_party/libfec/*.so ./plutosdr-fw/buildroot/output/target/usr/lib
          cp charon ./plutosdr-fw/buildroot/output/target/usr/bin
          
          arm-linux-gnueabihf-objdump -S -g -w -l --disassemble charon > out.txt


    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        name: build2
        path: |
          charon
          out.txt
